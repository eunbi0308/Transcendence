/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Auth
 * The NestJS Auth API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChatParticipantDto,
  UpdateChatParticipantDto,
} from '../models/index';
import {
    CreateChatParticipantDtoFromJSON,
    CreateChatParticipantDtoToJSON,
    UpdateChatParticipantDtoFromJSON,
    UpdateChatParticipantDtoToJSON,
} from '../models/index';

export interface ChatParticipantsControllerAddParticipantToChatroomRequest {
    chatRoomId: number;
    userId: number;
}

export interface ChatParticipantsControllerCreateRequest {
    createChatParticipantDto: CreateChatParticipantDto;
}

export interface ChatParticipantsControllerFindOneRequest {
    id: string;
}

export interface ChatParticipantsControllerFindParticipantByChatRoomRequest {
    chatRoomId: number;
}

export interface ChatParticipantsControllerFindParticipantChatRoomUserIdRequest {
    chatRoomId: number;
    userId: number;
}

export interface ChatParticipantsControllerRemoveRequest {
    id: string;
    chatRoomId: string;
}

export interface ChatParticipantsControllerUpdateParticipantRequest {
    chatRoomId: number;
    id: number;
    updateChatParticipantDto: UpdateChatParticipantDto;
}

/**
 * 
 */
export class ChatParticipantsApi extends runtime.BaseAPI {

    /**
     * Add a participant to a chat room
     */
    async chatParticipantsControllerAddParticipantToChatroomRaw(requestParameters: ChatParticipantsControllerAddParticipantToChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatRoomId'] == null) {
            throw new runtime.RequiredError(
                'chatRoomId',
                'Required parameter "chatRoomId" was null or undefined when calling chatParticipantsControllerAddParticipantToChatroom().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling chatParticipantsControllerAddParticipantToChatroom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatParticipants/{chatRoomId}/join/{userId}`.replace(`{${"chatRoomId"}}`, encodeURIComponent(String(requestParameters['chatRoomId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a participant to a chat room
     */
    async chatParticipantsControllerAddParticipantToChatroom(requestParameters: ChatParticipantsControllerAddParticipantToChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatParticipantsControllerAddParticipantToChatroomRaw(requestParameters, initOverrides);
    }

    /**
     * Create a chat participant
     */
    async chatParticipantsControllerCreateRaw(requestParameters: ChatParticipantsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createChatParticipantDto'] == null) {
            throw new runtime.RequiredError(
                'createChatParticipantDto',
                'Required parameter "createChatParticipantDto" was null or undefined when calling chatParticipantsControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chatParticipants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatParticipantDtoToJSON(requestParameters['createChatParticipantDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a chat participant
     */
    async chatParticipantsControllerCreate(requestParameters: ChatParticipantsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatParticipantsControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch all chat participants
     */
    async chatParticipantsControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatParticipants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all chat participants
     */
    async chatParticipantsControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatParticipantsControllerFindAllRaw(initOverrides);
    }

    /**
     * Fetch a chat participant by ID
     */
    async chatParticipantsControllerFindOneRaw(requestParameters: ChatParticipantsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chatParticipantsControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatParticipants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch a chat participant by ID
     */
    async chatParticipantsControllerFindOne(requestParameters: ChatParticipantsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatParticipantsControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch participants by chat room ID
     */
    async chatParticipantsControllerFindParticipantByChatRoomRaw(requestParameters: ChatParticipantsControllerFindParticipantByChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatRoomId'] == null) {
            throw new runtime.RequiredError(
                'chatRoomId',
                'Required parameter "chatRoomId" was null or undefined when calling chatParticipantsControllerFindParticipantByChatRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatParticipants/{chatRoomId}/find`.replace(`{${"chatRoomId"}}`, encodeURIComponent(String(requestParameters['chatRoomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch participants by chat room ID
     */
    async chatParticipantsControllerFindParticipantByChatRoom(requestParameters: ChatParticipantsControllerFindParticipantByChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatParticipantsControllerFindParticipantByChatRoomRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch participant in chat room by user ID
     */
    async chatParticipantsControllerFindParticipantChatRoomUserIdRaw(requestParameters: ChatParticipantsControllerFindParticipantChatRoomUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatRoomId'] == null) {
            throw new runtime.RequiredError(
                'chatRoomId',
                'Required parameter "chatRoomId" was null or undefined when calling chatParticipantsControllerFindParticipantChatRoomUserId().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling chatParticipantsControllerFindParticipantChatRoomUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatParticipants/{chatRoomId}/find/{userId}`.replace(`{${"chatRoomId"}}`, encodeURIComponent(String(requestParameters['chatRoomId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch participant in chat room by user ID
     */
    async chatParticipantsControllerFindParticipantChatRoomUserId(requestParameters: ChatParticipantsControllerFindParticipantChatRoomUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatParticipantsControllerFindParticipantChatRoomUserIdRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a chat participant
     */
    async chatParticipantsControllerRemoveRaw(requestParameters: ChatParticipantsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chatParticipantsControllerRemove().'
            );
        }

        if (requestParameters['chatRoomId'] == null) {
            throw new runtime.RequiredError(
                'chatRoomId',
                'Required parameter "chatRoomId" was null or undefined when calling chatParticipantsControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatParticipants/{chatRoomId}/delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"chatRoomId"}}`, encodeURIComponent(String(requestParameters['chatRoomId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a chat participant
     */
    async chatParticipantsControllerRemove(requestParameters: ChatParticipantsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatParticipantsControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update a chat participant
     */
    async chatParticipantsControllerUpdateParticipantRaw(requestParameters: ChatParticipantsControllerUpdateParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatRoomId'] == null) {
            throw new runtime.RequiredError(
                'chatRoomId',
                'Required parameter "chatRoomId" was null or undefined when calling chatParticipantsControllerUpdateParticipant().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chatParticipantsControllerUpdateParticipant().'
            );
        }

        if (requestParameters['updateChatParticipantDto'] == null) {
            throw new runtime.RequiredError(
                'updateChatParticipantDto',
                'Required parameter "updateChatParticipantDto" was null or undefined when calling chatParticipantsControllerUpdateParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chatParticipants/{chatRoomId}/update/{id}`.replace(`{${"chatRoomId"}}`, encodeURIComponent(String(requestParameters['chatRoomId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChatParticipantDtoToJSON(requestParameters['updateChatParticipantDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a chat participant
     */
    async chatParticipantsControllerUpdateParticipant(requestParameters: ChatParticipantsControllerUpdateParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatParticipantsControllerUpdateParticipantRaw(requestParameters, initOverrides);
    }

}
