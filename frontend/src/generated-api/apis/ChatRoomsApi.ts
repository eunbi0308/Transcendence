/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Auth
 * The NestJS Auth API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChatRoomDto,
} from '../models/index';
import {
    CreateChatRoomDtoFromJSON,
    CreateChatRoomDtoToJSON,
} from '../models/index';

export interface ChatRoomsControllerCreateRequest {
    createChatRoomDto: CreateChatRoomDto;
}

export interface ChatRoomsControllerFindOneRequest {
    id: string;
}

export interface ChatRoomsControllerRemoveRequest {
    id: string;
}

export interface ChatRoomsControllerUpdateRequest {
    id: string;
    body: object;
}

/**
 * 
 */
export class ChatRoomsApi extends runtime.BaseAPI {

    /**
     * Create a new chat room
     */
    async chatRoomsControllerCreateRaw(requestParameters: ChatRoomsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createChatRoomDto'] == null) {
            throw new runtime.RequiredError(
                'createChatRoomDto',
                'Required parameter "createChatRoomDto" was null or undefined when calling chatRoomsControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chatroom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatRoomDtoToJSON(requestParameters['createChatRoomDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new chat room
     */
    async chatRoomsControllerCreate(requestParameters: ChatRoomsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatRoomsControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Get a list of all chat rooms
     */
    async chatRoomsControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatroom`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a list of all chat rooms
     */
    async chatRoomsControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatRoomsControllerFindAllRaw(initOverrides);
    }

    /**
     * Get all public chat rooms
     */
    async chatRoomsControllerFindAllWithoutPrivateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatroom/noPrivate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all public chat rooms
     */
    async chatRoomsControllerFindAllWithoutPrivate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatRoomsControllerFindAllWithoutPrivateRaw(initOverrides);
    }

    /**
     * Get all chat rooms including participants
     */
    async chatRoomsControllerFindAllincludeParticipantRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatroom/includeParticipant`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all chat rooms including participants
     */
    async chatRoomsControllerFindAllincludeParticipant(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatRoomsControllerFindAllincludeParticipantRaw(initOverrides);
    }

    /**
     * Get a specific chat room by ID
     */
    async chatRoomsControllerFindOneRaw(requestParameters: ChatRoomsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chatRoomsControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatroom/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a specific chat room by ID
     */
    async chatRoomsControllerFindOne(requestParameters: ChatRoomsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatRoomsControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a chat room by ID
     */
    async chatRoomsControllerRemoveRaw(requestParameters: ChatRoomsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chatRoomsControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatroom/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a chat room by ID
     */
    async chatRoomsControllerRemove(requestParameters: ChatRoomsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatRoomsControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update a chat room by ID
     */
    async chatRoomsControllerUpdateRaw(requestParameters: ChatRoomsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chatRoomsControllerUpdate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling chatRoomsControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chatroom/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a chat room by ID
     */
    async chatRoomsControllerUpdate(requestParameters: ChatRoomsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatRoomsControllerUpdateRaw(requestParameters, initOverrides);
    }

}
