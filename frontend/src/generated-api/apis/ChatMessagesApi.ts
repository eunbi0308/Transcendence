/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Auth
 * The NestJS Auth API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChatMessageDto,
} from '../models/index';
import {
    CreateChatMessageDtoFromJSON,
    CreateChatMessageDtoToJSON,
} from '../models/index';

export interface ChatMessagesControllerCreateRequest {
    createChatMessageDto: CreateChatMessageDto;
}

export interface ChatMessagesControllerFindAllByUserAndChatRoomRequest {
    chatRoomId: string;
    userId: string;
}

export interface ChatMessagesControllerFindAllByUserIdRequest {
    userId: string;
}

export interface ChatMessagesControllerFindOneRequest {
    id: string;
}

export interface ChatMessagesControllerRemoveRequest {
    chatRoomId: string;
}

/**
 * 
 */
export class ChatMessagesApi extends runtime.BaseAPI {

    /**
     * Create a chat message
     */
    async chatMessagesControllerCreateRaw(requestParameters: ChatMessagesControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createChatMessageDto'] == null) {
            throw new runtime.RequiredError(
                'createChatMessageDto',
                'Required parameter "createChatMessageDto" was null or undefined when calling chatMessagesControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chatMessages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatMessageDtoToJSON(requestParameters['createChatMessageDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a chat message
     */
    async chatMessagesControllerCreate(requestParameters: ChatMessagesControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatMessagesControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all chat messages
     */
    async chatMessagesControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatMessages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve all chat messages
     */
    async chatMessagesControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatMessagesControllerFindAllRaw(initOverrides);
    }

    /**
     * Retrieve messages by user ID and chat room ID
     */
    async chatMessagesControllerFindAllByUserAndChatRoomRaw(requestParameters: ChatMessagesControllerFindAllByUserAndChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatRoomId'] == null) {
            throw new runtime.RequiredError(
                'chatRoomId',
                'Required parameter "chatRoomId" was null or undefined when calling chatMessagesControllerFindAllByUserAndChatRoom().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling chatMessagesControllerFindAllByUserAndChatRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatMessages/chatRoom/{chatRoomId}/user/{userId}`.replace(`{${"chatRoomId"}}`, encodeURIComponent(String(requestParameters['chatRoomId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve messages by user ID and chat room ID
     */
    async chatMessagesControllerFindAllByUserAndChatRoom(requestParameters: ChatMessagesControllerFindAllByUserAndChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatMessagesControllerFindAllByUserAndChatRoomRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all messages by user ID
     */
    async chatMessagesControllerFindAllByUserIdRaw(requestParameters: ChatMessagesControllerFindAllByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling chatMessagesControllerFindAllByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatMessages/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve all messages by user ID
     */
    async chatMessagesControllerFindAllByUserId(requestParameters: ChatMessagesControllerFindAllByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatMessagesControllerFindAllByUserIdRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve chat messages by chat room ID
     */
    async chatMessagesControllerFindOneRaw(requestParameters: ChatMessagesControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling chatMessagesControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatMessages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve chat messages by chat room ID
     */
    async chatMessagesControllerFindOne(requestParameters: ChatMessagesControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatMessagesControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * Delete all chat messages for a chat room
     */
    async chatMessagesControllerRemoveRaw(requestParameters: ChatMessagesControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatRoomId'] == null) {
            throw new runtime.RequiredError(
                'chatRoomId',
                'Required parameter "chatRoomId" was null or undefined when calling chatMessagesControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chatMessages/{chatRoomId}`.replace(`{${"chatRoomId"}}`, encodeURIComponent(String(requestParameters['chatRoomId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all chat messages for a chat room
     */
    async chatMessagesControllerRemove(requestParameters: ChatMessagesControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatMessagesControllerRemoveRaw(requestParameters, initOverrides);
    }

}
