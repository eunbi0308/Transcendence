/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Auth
 * The NestJS Auth API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateBlockedDto,
} from '../models/index';
import {
    CreateBlockedDtoFromJSON,
    CreateBlockedDtoToJSON,
} from '../models/index';

export interface BlockedsControllerCreateRequest {
    createBlockedDto: CreateBlockedDto;
}

export interface BlockedsControllerFindOneRequest {
    id: string;
}

export interface BlockedsControllerRemoveRequest {
    id: string;
}

/**
 * 
 */
export class BlockedsApi extends runtime.BaseAPI {

    /**
     * Create a blocked entry
     */
    async blockedsControllerCreateRaw(requestParameters: BlockedsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createBlockedDto'] == null) {
            throw new runtime.RequiredError(
                'createBlockedDto',
                'Required parameter "createBlockedDto" was null or undefined when calling blockedsControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/blockeds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBlockedDtoToJSON(requestParameters['createBlockedDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a blocked entry
     */
    async blockedsControllerCreate(requestParameters: BlockedsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.blockedsControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all blocked entries
     */
    async blockedsControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blockeds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve all blocked entries
     */
    async blockedsControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.blockedsControllerFindAllRaw(initOverrides);
    }

    /**
     * Retrieve a blocked entry by user ID
     */
    async blockedsControllerFindOneRaw(requestParameters: BlockedsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling blockedsControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blockeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve a blocked entry by user ID
     */
    async blockedsControllerFindOne(requestParameters: BlockedsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.blockedsControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a blocked entry by ID
     */
    async blockedsControllerRemoveRaw(requestParameters: BlockedsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling blockedsControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blockeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a blocked entry by ID
     */
    async blockedsControllerRemove(requestParameters: BlockedsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.blockedsControllerRemoveRaw(requestParameters, initOverrides);
    }

}
