/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Auth
 * The NestJS Auth API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateAchievementDto,
  UpdateAchievementDto,
} from '../models/index';
import {
    CreateAchievementDtoFromJSON,
    CreateAchievementDtoToJSON,
    UpdateAchievementDtoFromJSON,
    UpdateAchievementDtoToJSON,
} from '../models/index';

export interface AchievementsControllerCreateRequest {
    createAchievementDto: CreateAchievementDto;
}

export interface AchievementsControllerFindOneRequest {
    id: number;
}

export interface AchievementsControllerRemoveRequest {
    id: number;
}

export interface AchievementsControllerUpdateRequest {
    id: number;
    updateAchievementDto: UpdateAchievementDto;
}

/**
 * 
 */
export class AchievementsApi extends runtime.BaseAPI {

    /**
     * Create an achievement
     */
    async achievementsControllerCreateRaw(requestParameters: AchievementsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createAchievementDto'] == null) {
            throw new runtime.RequiredError(
                'createAchievementDto',
                'Required parameter "createAchievementDto" was null or undefined when calling achievementsControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/achievements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAchievementDtoToJSON(requestParameters['createAchievementDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an achievement
     */
    async achievementsControllerCreate(requestParameters: AchievementsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.achievementsControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all achievements
     */
    async achievementsControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/achievements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve all achievements
     */
    async achievementsControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.achievementsControllerFindAllRaw(initOverrides);
    }

    /**
     * Retrieve a specific achievement by ID
     */
    async achievementsControllerFindOneRaw(requestParameters: AchievementsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling achievementsControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/achievements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve a specific achievement by ID
     */
    async achievementsControllerFindOne(requestParameters: AchievementsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.achievementsControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a specific achievement by ID
     */
    async achievementsControllerRemoveRaw(requestParameters: AchievementsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling achievementsControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/achievements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific achievement by ID
     */
    async achievementsControllerRemove(requestParameters: AchievementsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.achievementsControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update a specific achievement by ID
     */
    async achievementsControllerUpdateRaw(requestParameters: AchievementsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling achievementsControllerUpdate().'
            );
        }

        if (requestParameters['updateAchievementDto'] == null) {
            throw new runtime.RequiredError(
                'updateAchievementDto',
                'Required parameter "updateAchievementDto" was null or undefined when calling achievementsControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/achievements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAchievementDtoToJSON(requestParameters['updateAchievementDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a specific achievement by ID
     */
    async achievementsControllerUpdate(requestParameters: AchievementsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.achievementsControllerUpdateRaw(requestParameters, initOverrides);
    }

}
