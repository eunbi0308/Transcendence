# version: '3.7'

services:
  frontend:
    container_name: frontend
    image: frontend
    build:
      dockerfile: Dockerfile
      context: "./frontend"
    depends_on:
      - nestjs
    volumes:
      - /frontend/node_modules
      - ./frontend:/app
    ports:
      - "3001:3000"
    command: sh -c "npm ci && npm run start"
    environment:
      - WDS_SOCKET_PORT=0 

  nestjs:
    # user: ${UID}
    container_name: nestjs
    image: nestjs
    build:
      dockerfile: Dockerfile
      context: "./backend"
    # networks:
    #   - network
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - ./secrets:/usr/src/app/secrets

    working_dir: /usr/src/app
    ports:
      # - ${SERVER_PORT}:${SERVER_PORT}
      - "3000:3000"
    command: sh -c "cd ./backend && npm ci && npm run start:dev"
    depends_on:
      - postgres
    environment:
      - WDS_SOCKET_PORT=0 
    

  postgres:
    # user: ${UID}
    container_name: postgres
    image: postgres:16
    # networks:
    #   - network
    volumes:
      - pg-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      PG_DATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    # networks:
    #   - network
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_MAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PW}
      - WDS_SOCKET_PORT=0
    ports:
      - "5050:80"
    restart: always
    #   - pgdata:/var/lib/postgresql/data
# networks:
#   network:
#     name: network
#     driver: bridge
volumes:
  pg-data:
